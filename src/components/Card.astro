---
const { photos } = Astro.props;
---

<style>
  .body {
    margin: 0;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background-color: #000;
    padding: 0 40px;
    font-family: 'Source Sans Pro', Helvetica, sans-serif;
    font-weight: 300;
  }

  #grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, 150px);
    grid-column-gap: 30px;
    grid-row-gap: 30px;
    align-items: center;
    justify-content: center;
    width: 100%;
    max-width: 700px;
  }

  #grid .card {
    background-color: #ccc;
    width: 150px;
    height: 150px;
    transition: all 0.1s ease;
    border-radius: 3px;
    position: relative;
    z-index: 1;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.2);
    overflow: hidden;
    cursor: pointer;
  }

  #grid .card:hover {
    transform: scale(2);
    z-index: 2;
    box-shadow: 0 10px 20px rgba(255, 255, 255, 0.2);
  }

  #grid .card:hover img {
    filter: grayscale(0);
  }

  #grid .card .reflection {
    position: absolute;
    width: 100%;
    height: 100%;
    z-index: 2;
    left: 0;
    top: 0;
    transition: all 0.1s ease;
    opacity: 0;
    mix-blend-mode: soft-light;
  }

  #grid .card img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    filter: grayscale(0.65);
    transition: all 0.3s ease;
  }
</style>

<div class="body">
  <div class="grid" id="grid">
    {
      photos.map((photo) => (
        <a class="card" href={photo.link} target="_blank">
          <div class="reflection" />
          <img loading="lazy" src={photo.img} alt={photo.alt} />
        </a>
      ))
    }
  </div>
</div>

<script>
  function over(e) {
    e.currentTarget.querySelector('.reflection').style.opacity = 1;
  }
  function leave(e) {
    const t = e.currentTarget,
      r = e.currentTarget.querySelector('.reflection');
    (t.style.transform = 'perspective(500px) scale(1)'), (r.style.opacity = 0);
  }
  function move(e) {
    const t = e.currentTarget,
      r = e.currentTarget.querySelector('.reflection'),
      a = (e.offsetX + 1) / t.offsetWidth,
      o = (e.offsetY + 1) / t.offsetHeight,
      c = `rotateY(${60 * (a - 0.5)}deg)`,
      n = `rotateX(${-60 * (o - 0.5)}deg)`;
    t.style.transform = `perspective(500px) scale(2) ${c} ${n}`;
    const s = scale(a, 0, 1, 150, -50),
      l = scale(o, 0, 1, 30, -100),
      i = 255 * scale(Math.min(Math.max(o, 0.3), 0.7), 0.3, 1, 1, 0),
      u = `rgba(${i}, ${i}, ${i}, 1)`;
    r.style.backgroundImage = `radial-gradient(circle at ${s}% ${l}%, ${u} 20%, rgba(0, 0, 0, 1))`;
  }
  function scale(e, t, r, a, o) {
    return a + ((e - t) * (o - a)) / (r - t);
  }
  document.querySelectorAll('.card').forEach((e) => {
    e.addEventListener('mousemove', move),
      e.addEventListener('mouseleave', leave),
      e.addEventListener('mouseover', over);
  });
</script>
