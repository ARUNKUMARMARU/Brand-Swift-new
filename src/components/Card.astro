---
const { photos } = Astro.props;
---

<style>
  .body {
    margin: 0;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background-color: #000;
    padding: 0 40px;
    font-family: 'Source Sans Pro', Helvetica, sans-serif;
    font-weight: 300;
  }

  #grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, 150px);
    grid-column-gap: 30px;
    grid-row-gap: 30px;
    align-items: center;
    justify-content: center;
    width: 100%;
    max-width: 700px;
  }

  #grid .card {
    background-color: #ccc;
    width: 150px;
    height: 150px;
    transition: all 0.1s ease;
    border-radius: 3px;
    position: relative;
    z-index: 1;
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.2);
    overflow: hidden;
    cursor: pointer;
  }

  #grid .card:hover {
    transform: scale(2);
    z-index: 2;
    box-shadow: 0 10px 20px rgba(255, 255, 255, 0.2);
  }

  #grid .card:hover img {
    filter: grayscale(0);
  }

  #grid .card .reflection {
    position: absolute;
    width: 100%;
    height: 100%;
    z-index: 2;
    left: 0;
    top: 0;
    transition: all 0.1s ease;
    opacity: 0;
    mix-blend-mode: soft-light;
  }

  #grid .card img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    filter: grayscale(0.65);
    transition: all 0.3s ease;
  }
</style>

<div class="body">
  <div class="grid" id="grid">
    {
      photos.map((photo) => (
        <a class="card" href={photo.link} target="_blank">
          <div class="reflection" />
          <img src={photo.img} alt={photo.alt} />
        </a>
      ))
    }
  </div>
</div>

<script>
  function over(event) {
    const refl = event.currentTarget.querySelector('.reflection');
    refl.style.opacity = 1;
  }

  function leave(event) {
    const card = event.currentTarget;
    const refl = event.currentTarget.querySelector('.reflection');
    card.style.transform = 'perspective(500px) scale(1)';
    refl.style.opacity = 0;
  }

  function move(event) {
    const card = event.currentTarget;
    const refl = event.currentTarget.querySelector('.reflection');

    const relX = (event.offsetX + 1) / card.offsetWidth;
    const relY = (event.offsetY + 1) / card.offsetHeight;
    const rotY = `rotateY(${(relX - 0.5) * 60}deg)`;
    const rotX = `rotateX(${(relY - 0.5) * -60}deg)`;
    card.style.transform = `perspective(500px) scale(2) ${rotY} ${rotX}`;

    const lightX = scale(relX, 0, 1, 150, -50);
    const lightY = scale(relY, 0, 1, 30, -100);
    const lightConstrain = Math.min(Math.max(relY, 0.3), 0.7);
    const lightOpacity = scale(lightConstrain, 0.3, 1, 1, 0) * 255;
    const lightShade = `rgba(${lightOpacity}, ${lightOpacity}, ${lightOpacity}, 1)`;
    const lightShadeBlack = 'rgba(0, 0, 0, 1)';
    refl.style.backgroundImage = `radial-gradient(circle at ${lightX}% ${lightY}%, ${lightShade} 20%, ${lightShadeBlack})`;
  }

  function scale(val, inMin, inMax, outMin, outMax) {
    return outMin + ((val - inMin) * (outMax - outMin)) / (inMax - inMin);
  }

  document.querySelectorAll('.card').forEach((card) => {
    card.addEventListener('mousemove', move);
    card.addEventListener('mouseleave', leave);
    card.addEventListener('mouseover', over);
  });
</script>
